/* tslint:disable */
/**
 * This file was automatically generated by Payload CMS.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    'audit-logs': AuditLog;
    staff: Staff;
    roles: Role;
    companies: Company;
    plans: Plan;
    partners: Partner;
    invoices: Invoice;
    payments: Payment;
    expenses: Expense;
    media: Media;
    buildings: Building;
    buildingUnits: BuildingUnit;
    leads: Lead;
    subscribers: Subscriber;
    'network-devices': NetworkDevice;
    ipSubnets: IpSubnet;
    ipAddresses: IpAddress;
    'work-orders': WorkOrder;
    'crisis-events': CrisisEvent;
    'service-locations': ServiceLocation;
    tickets: Ticket;
    messages: Message;
    contacts: Contact;
    messageTemplates: MessageTemplate;
  };
  globals: {};
}
export interface AuditLog {
  id: string;
  timestamp: string;
  user?: string | Staff;
  action: string;
  collectionSlug: string;
  documentId: string;
  before?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  after?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
export interface Staff {
  id: string;
  fullName: string;
  assignedRole: string | Role;
  status: 'active' | 'inactive';
  phoneNumber?: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface Role {
  id: string;
  name: string;
  permissions: {
    collection: string;
    read?: boolean;
    create?: boolean;
    update?: boolean;
    delete?: boolean;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface Company {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
export interface Plan {
  id: string;
  name: string;
  downloadSpeed: number;
  uploadSpeed: number;
  price: number;
  billingCycle: 'monthly' | 'quarterly';
  notes?: string;
  planEnabled?: boolean;
  activeForNewSignups?: boolean;
  ipAssignmentType: 'dynamic' | 'static-public';
  staticIpPool?: string | IpSubnet;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface IpSubnet {
  id: string;
  network: string;
  description: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Partner {
  id: string;
  fullName: string;
  phoneNumber: string;
  mpesaNumber: string;
  status: 'prospect' | 'active' | 'inactive';
  buildings?: string[] | Building[];
  commissionRate?: number;
  referralCount?: number;
  perks?: boolean;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Building {
  id: string;
  name: string;
  buildingImage?: string | Media;
  address: string;
  status: 'prospecting' | 'negotiating' | 'active' | 'lost';
  partner?: string | Partner;
  /**
   * @minItems 2
   * @maxItems 2
   */
  location?: [number, number];
  equipment?: string[] | NetworkDevice[];
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Media {
  id: string;
  alt: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
}
export interface NetworkDevice {
  id: string;
  deviceName: string;
  ipAddress?: string | IpAddress;
  deviceType: 'core-router' | 'switch' | 'access-point' | 'station' | 'cpe';
  purchaseDate?: string;
  purchaseCost?: number;
  monitoringType?: 'icmp' | 'icmp-snmp';
  snmpCommunity?: string;
  physicalLocation?: string | ServiceLocation;
  parentDevice?: string | NetworkDevice;
  ispOwner?: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface IpAddress {
  id: string;
  ipAddress: string;
  subnet: string | IpSubnet;
  status: 'available' | 'assigned' | 'reserved';
  assignedDevice?: string | NetworkDevice;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface ServiceLocation {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
export interface Invoice {
  id: string;
  invoiceNumber: string;
  subscriber: string | Subscriber;
  amountDue: number;
  dueDate: string;
  status: 'draft' | 'unpaid' | 'paid' | 'partially-paid' | 'overdue' | 'cancelled';
  lineItems: {
    description: string;
    quantity: number;
    price: number;
    id?: string;
  }[];
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Subscriber {
  id: string;
  firstName: string;
  lastName: string;
  accountNumber: string;
  mpesaNumber: string;
  contactPhone?: string;
  email?: string;
  status: 'pending-installation' | 'active' | 'suspended' | 'deactivated';
  servicePlan?: string | Plan;
  billingCycle?: 'monthly' | 'quarterly';
  nextDueDate?: string;
  accountBalance?: number;
  gracePeriodEndDate?: string;
  trialDays?: number;
  trialEndDate?: string;
  addressNotes?: string;
  internalNotes?: {
    [k: string]: unknown;
  }[];
  upfrontCharges?: {
    description: string;
    quantity: number;
    price: number;
    id?: string;
  }[];
  connectionType?: 'pppoe' | 'ipoe-dhcp' | 'static-ip' | 'hotspot';
  radiusUsername?: string;
  radiusPassword?: string;
  assignedIp?: string | IpAddress;
  macAddress?: string;
  cpeDevice?: string | NetworkDevice;
  deviceToken?: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Payment {
  id: string;
  paymentReference: string;
  invoice?: string | Invoice;
  amountPaid: number;
  paymentMethod: 'mpesa' | 'bank-transfer' | 'cash';
  paymentDate: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Expense {
  id: string;
  expenseDate: string;
  expenseType?: 'capex' | 'opex';
  category:
    | 'salaries'
    | 'bandwidth'
    | 'rent'
    | 'utilities'
    | 'marketing'
    | 'network-hardware'
    | 'vehicles'
    | 'tools'
    | 'other';
  description?: string;
  amount: number;
  relatedAsset?:
    | {
        value: string | NetworkDevice;
        relationTo: 'network-devices';
      }
    | {
        value: string | Staff;
        relationTo: 'staff';
      };
  status?: 'uncategorized' | 'approved';
  ispOwner?: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface BuildingUnit {
  id: string;
  unitNumber: string;
  building: string | Building;
  status: 'vacant' | 'occupied' | 'lead' | 'subscriber';
  currentProvider?: string;
  competitorPaymentDate?: string;
  currentIssues?: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Lead {
  id: string;
  status: 'new' | 'contacted' | 'site-survey' | 'converted' | 'lost';
  leadSource: 'partner-referral' | 'website' | 'direct-call';
  referredBy?: string | Partner;
  subscriberName: string;
  subscriberPhone: string;
  serviceLocation: string | BuildingUnit;
  preferredPlan?: string | Plan;
  preferredBillingCycle?: 'monthly' | 'quarterly';
  notes?: {
    [k: string]: unknown;
  }[];
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface WorkOrder {
  id: string;
  orderType: 'new-installation' | 'repair' | 'site-survey';
  subscriber: string | Subscriber;
  status: 'pending' | 'scheduled' | 'in-progress' | 'completed' | 'failed';
  assignedTo?: string | Staff;
  notes?: string;
  ticket?: string | Ticket;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Ticket {
  id: string;
  ticketID: string;
  subscriber?: string | Subscriber;
  subject: string;
  description: {
    [k: string]: unknown;
  }[];
  status: 'open' | 'in-progress' | 'resolved' | 'closed';
  priority: 'low' | 'medium' | 'high';
  assignedTo?: string | Staff;
  workOrder?: string | WorkOrder;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface CrisisEvent {
  id: string;
  rootCauseDevice?: string | NetworkDevice;
  affectedSubscribers?: string[] | Subscriber[];
  status?: 'ongoing' | 'resolved';
  description?: string;
  startTime?: string;
  endTime?: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Message {
  id: string;
  recipient: string;
  type: 'sms' | 'email' | 'push';
  content: string;
  status: 'sent' | 'failed';
  triggerEvent?: string;
  sentBy?: string | Staff;
  bulkSend?: boolean;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Contact {
  id: string;
  phoneNumber: string;
  fullName?: string;
  source?: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface MessageTemplate {
  id: string;
  templateName: string;
  content: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
