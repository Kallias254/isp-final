/* tslint:disable */
/**
 * This file was automatically generated by Payload CMS.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    'audit-logs': AuditLog;
    buildings: Building;
    'building-units': BuildingUnit;
    contacts: Contact;
    'crisis-events': CrisisEvent;
    expenses: Expense;
    invoices: Invoice;
    ipAddresses: IpAddress;
    ipSubnets: IpSubnet;
    leads: Lead;
    media: Media;
    messages: Message;
    messageTemplates: MessageTemplate;
    'network-devices': NetworkDevice;
    partners: Partner;
    payments: Payment;
    plans: Plan;
    'service-locations': ServiceLocation;
    staff: Staff;
    subscribers: Subscriber;
    'subscriber-technical-details': SubscriberTechnicalDetail;
    tickets: Ticket;
    'work-orders': WorkOrder;
    companies: Company;
    roles: Role;
  };
  globals: {};
}
export interface AuditLog {
  id: string;
  timestamp: string;
  user?: string | Staff;
  action: string;
  collectionSlug: string;
  documentId: string;
  before?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  after?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
export interface Staff {
  id: string;
  fullName: string;
  assignedRole: string | Role;
  status: 'active' | 'inactive';
  phoneNumber?: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface Role {
  id: string;
  name: string;
  permissions: {
    collection:
      | 'audit-logs'
      | 'staff'
      | 'roles'
      | 'companies'
      | 'plans'
      | 'partners'
      | 'invoices'
      | 'payments'
      | 'expenses'
      | 'media'
      | 'buildings'
      | 'building-units'
      | 'leads'
      | 'subscribers'
      | 'subscriber-technical-details'
      | 'network-devices'
      | 'ipSubnets'
      | 'ipAddresses'
      | 'work-orders'
      | 'crisis-events'
      | 'service-locations'
      | 'tickets'
      | 'messages'
      | 'contacts'
      | 'messageTemplates';
    read?: boolean;
    create?: boolean;
    update?: boolean;
    delete?: boolean;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface Company {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
export interface Building {
  id: string;
  name: string;
  buildingImage?: string | Media;
  location: string | ServiceLocation;
  status: 'active' | 'prospecting' | 'negotiating' | 'on_hold';
  equipment?: string[] | NetworkDevice[];
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Media {
  id: string;
  alt: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
}
export interface ServiceLocation {
  id: string;
  name: string;
  latitude: number;
  longitude: number;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface NetworkDevice {
  id: string;
  deviceName: string;
  ipAddress?: string | IpAddress;
  deviceType: 'core-router' | 'switch' | 'access-point' | 'station' | 'cpe';
  purchaseDate?: string;
  purchaseCost?: number;
  monitoringType?: 'icmp' | 'icmp-snmp';
  snmpCommunity?: string;
  physicalLocation?: string | ServiceLocation;
  parentDevice?: string | NetworkDevice;
  ispOwner?: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface IpAddress {
  id: string;
  ipAddress: string;
  subnet: string | IpSubnet;
  status: 'available' | 'assigned' | 'reserved';
  assignedDevice?: string | NetworkDevice;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface IpSubnet {
  id: string;
  network: string;
  description: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface BuildingUnit {
  id: string;
  unitNumber: string;
  building: string | Building;
  status: 'vacant-unsurveyed' | 'lead' | 'active-subscriber' | 'former-subscriber' | 'do-not-solicit';
  subscriber?: string | Subscriber;
  lead?: string | Lead;
  currentProvider?: string;
  competitorPaymentDate?: string;
  currentIssues?: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Subscriber {
  id: string;
  ispOwner: string | Company;
  accountNumber: string;
  firstName: string;
  lastName: string;
  contactPhone: string;
  email?: string;
  mpesaNumber?: string;
  status: 'active' | 'suspended' | 'pending-installation' | 'disconnected';
  servicePlan: string | Plan;
  billingCycle: 'monthly' | 'quarterly' | 'annually';
  nextDueDate: string;
  accountBalance?: number;
  lastPaymentDate?: string;
  trialDays?: number;
  trialEndDate?: string;
  upfrontCharges?: {
    description?: string;
    quantity?: number;
    price?: number;
    id?: string;
  }[];
  internalNotes?: string;
  buildingUnit?: string | BuildingUnit;
  connectionType?: 'fiber' | 'wireless';
  assignedIp?: string;
  cpeDevice?: string | NetworkDevice;
  radiusPassword?: string;
  deviceToken?: string;
  gracePeriodEndDate?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Plan {
  id: string;
  name: string;
  downloadSpeed: number;
  uploadSpeed: number;
  price: number;
  ipAssignmentType: 'dynamic-pool' | 'static-pool' | 'static-individual';
  dynamicIpPool?: string | IpSubnet;
  staticIpPool?: string | IpSubnet;
  sessionLimit?: number;
  notes?: string;
  planEnabled?: boolean;
  activeForNewSignups?: boolean;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Lead {
  id: string;
  ispOwner: string | Company;
  subscriberName: string;
  subscriberPhone: string;
  status?: 'new' | 'contacted' | 'qualified' | 'converted' | 'lost';
  leadSource?: 'partner-referral' | 'direct' | 'marketing-campaign';
  referredBy?: string | Partner;
  preferredPlan?: string | Plan;
  notes?: string;
  buildingUnit?: string | BuildingUnit;
  updatedAt: string;
  createdAt: string;
}
export interface Partner {
  id: string;
  fullName: string;
  phoneNumber: string;
  mpesaNumber: string;
  status: 'prospect' | 'active' | 'inactive';
  buildings?: string[] | Building[];
  commissionRate?: number;
  referralCount?: number;
  perks?: boolean;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Contact {
  id: string;
  phoneNumber: string;
  fullName?: string;
  source?: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface CrisisEvent {
  id: string;
  rootCauseDevice?: string | NetworkDevice;
  affectedSubscribers?: string[] | Subscriber[];
  status?: 'ongoing' | 'resolved';
  description?: string;
  startTime?: string;
  endTime?: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Expense {
  id: string;
  expenseDate: string;
  expenseType?: 'capex' | 'opex';
  category:
    | 'salaries'
    | 'bandwidth'
    | 'rent'
    | 'utilities'
    | 'marketing'
    | 'network-hardware'
    | 'vehicles'
    | 'tools'
    | 'other';
  description?: string;
  amount: number;
  relatedAsset?:
    | {
        value: string | NetworkDevice;
        relationTo: 'network-devices';
      }
    | {
        value: string | Staff;
        relationTo: 'staff';
      };
  status?: 'uncategorized' | 'approved';
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Invoice {
  id: string;
  ispOwner: string | Company;
  invoiceNumber: string;
  subscriber: string | Subscriber;
  amountDue: number;
  dueDate: string;
  status?: 'unpaid' | 'paid' | 'overdue' | 'waived' | 'partially-paid';
  lineItems: {
    description: string;
    quantity: number;
    price: number;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface Message {
  id: string;
  recipient: string;
  type: 'sms' | 'email' | 'push';
  content: string;
  status: 'sent' | 'failed';
  triggerEvent?: string;
  sentBy?: string | Staff;
  bulkSend?: boolean;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface MessageTemplate {
  id: string;
  templateName: string;
  content: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Payment {
  id: string;
  ispOwner: string | Company;
  paymentReference: string;
  invoice: string | Invoice;
  amountPaid: number;
  paymentDate: string;
  paymentMethod: 'mpesa' | 'bank-transfer' | 'cash';
  updatedAt: string;
  createdAt: string;
}
export interface SubscriberTechnicalDetail {
  id: string;
  subscriber: string | Subscriber;
  vlanId: number;
  connectionType: 'pppoe' | 'ipoe-dhcp';
  radiusUsername: string;
  radiusPassword: string;
  macAddress?: string;
  assignedIp?: string;
  ispOwner: string | Company;
  updatedAt: string;
  createdAt: string;
}
export interface Ticket {
  id: string;
  ispOwner: string | Company;
  ticketID: string;
  subscriber: string | Subscriber;
  subject: string;
  description: string;
  status?: 'open' | 'in-progress' | 'resolved' | 'closed';
  priority?: 'low' | 'medium' | 'high';
  assignedTo?: string | Staff;
  workOrder?: string | WorkOrder;
  updatedAt: string;
  createdAt: string;
}
export interface WorkOrder {
  id: string;
  ispOwner: string | Company;
  orderType: 'new-installation' | 'repair' | 'upgrade' | 'other';
  subscriber?: string | Subscriber;
  status?: 'pending' | 'in-progress' | 'completed' | 'cancelled';
  assignedTo?: string | Staff;
  notes?: string;
  ticket?: string | Ticket;
  updatedAt: string;
  createdAt: string;
}
