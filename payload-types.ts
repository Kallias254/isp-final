/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    staff: Staff;
    roles: Role;
    plans: Plan;
    partners: Partner;
    invoices: Invoice;
    payments: Payment;
    expenses: Expense;
    media: Media;
    buildings: Building;
    buildingUnits: BuildingUnit;
    leads: Lead;
    subscribers: Subscriber;
    resources: Resource;
    ipSubnets: IpSubnet;
    ipAddresses: IpAddress;
    workOrders: WorkOrder;
    tickets: Ticket;
    messages: Message;
    contacts: Contact;
    messageTemplates: MessageTemplate;
  };
  globals: {};
}
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface Staff {
  id: string;
  fullName: string;
  assignedRole: string | Role;
  status: 'active' | 'inactive';
  phoneNumber?: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string;
  resetPasswordExpiration?: string;
  salt?: string;
  hash?: string;
  loginAttempts?: number;
  lockUntil?: string;
  password?: string;
}
export interface Role {
  id: string;
  name: string;
  permissions?: {
    collection: string;
    read?: boolean;
    create?: boolean;
    update?: boolean;
    delete?: boolean;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface Plan {
  id: string;
  name: string;
  downloadSpeed: number;
  uploadSpeed: number;
  price: number;
  billingCycle: 'monthly' | 'quarterly';
  notes?: string;
  planEnabled?: boolean;
  activeForNewSignups?: boolean;
  ipAssignmentType: 'dynamic' | 'static-public';
  staticIpPool?: string | IpSubnet;
  updatedAt: string;
  createdAt: string;
}
export interface IpSubnet {
  id: string;
  network: string;
  description: string;
  updatedAt: string;
  createdAt: string;
}
export interface Partner {
  id: string;
  fullName: string;
  phoneNumber: string;
  mpesaNumber: string;
  status: 'prospect' | 'active' | 'inactive';
  buildings?: string[] | Building[];
  commissionRate?: number;
  referralCount?: number;
  perks?: boolean;
  updatedAt: string;
  createdAt: string;
}
export interface Building {
  id: string;
  name: string;
  address: string;
  status: 'prospecting' | 'negotiating' | 'active' | 'lost';
  partner?: string | Partner;
  /**
   * @minItems 2
   * @maxItems 2
   */
  location?: [number, number];
  equipment?: string[] | Resource[];
  updatedAt: string;
  createdAt: string;
}
export interface Resource {
  id: string;
  resourceName: string;
  resourceType: 'router' | 'antenna' | 'switch' | 'cable';
  serialNumber?: string;
  macAddress?: string;
  status: 'in-stock' | 'deployed' | 'faulty' | 'retired';
  assignedTo?:
    | {
        value: string | Subscriber;
        relationTo: 'subscribers';
      }
    | {
        value: string | Building;
        relationTo: 'buildings';
      };
  location?: string | Building;
  updatedAt: string;
  createdAt: string;
}
export interface Subscriber {
  id: string;
  firstName: string;
  lastName: string;
  accountNumber: string;
  mpesaNumber: string;
  contactPhone?: string;
  email?: string;
  status: 'pending-installation' | 'active' | 'suspended' | 'deactivated';
  servicePlan: string | Plan;
  billingCycle: 'monthly' | 'quarterly';
  nextDueDate: string;
  accountBalance?: number;
  gracePeriodEndDate?: string;
  trialEndDate?: string;
  addressNotes?: string;
  internalNotes?: {
    [k: string]: unknown;
  }[];
  initialOneOffCharges?: {
    description: string;
    quantity: number;
    price: number;
    id?: string;
  }[];
  connectionType?: 'pppoe' | 'ipoe-dhcp' | 'static-ip' | 'hotspot';
  radiusUsername?: string;
  radiusPassword?: string;
  assignedIp?: string | IpAddress;
  macAddress?: string;
  router?: string | Resource;
  deviceToken?: string;
  updatedAt: string;
  createdAt: string;
}
export interface IpAddress {
  id: string;
  ipAddress: string;
  subnet: string | IpSubnet;
  status: 'available' | 'assigned' | 'reserved';
  assignedTo?: string | Subscriber;
  updatedAt: string;
  createdAt: string;
}
export interface Invoice {
  id: string;
  invoiceNumber: string;
  subscriber: string | Subscriber;
  amountDue: number;
  dueDate: string;
  status: 'draft' | 'unpaid' | 'paid' | 'partially-paid' | 'overdue' | 'cancelled';
  lineItems: {
    description: string;
    quantity: number;
    price: number;
    id?: string;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface Payment {
  id: string;
  paymentReference: string;
  invoice?: string | Invoice;
  amountPaid: number;
  paymentMethod: 'mpesa' | 'bank-transfer' | 'cash';
  paymentDate: string;
  updatedAt: string;
  createdAt: string;
}
export interface Expense {
  id: string;
  expenseDate: string;
  category: 'bandwidth' | 'salaries' | 'rent' | 'utilities' | 'marketing' | 'equipment' | 'other';
  vendor?: string;
  amount: number;
  description?: string;
  receipt?: string | Media;
  updatedAt: string;
  createdAt: string;
}
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string;
  filename?: string;
  mimeType?: string;
  filesize?: number;
  width?: number;
  height?: number;
}
export interface BuildingUnit {
  id: string;
  unitNumber: string;
  building: string | Building;
  status: 'vacant' | 'occupied' | 'lead' | 'subscriber';
  currentProvider?: string;
  competitorPaymentDate?: string;
  currentIssues?: string;
  updatedAt: string;
  createdAt: string;
}
export interface Lead {
  id: string;
  status: 'new' | 'contacted' | 'site-survey' | 'converted' | 'lost';
  leadSource: 'partner-referral' | 'website' | 'direct-call';
  referredBy?: string | Partner;
  subscriberName: string;
  subscriberPhone: string;
  serviceLocation: string | BuildingUnit;
  notes?: {
    [k: string]: unknown;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface WorkOrder {
  id: string;
  orderType: 'new-installation' | 'repair' | 'site-survey';
  subscriber: string | Subscriber;
  status: 'pending' | 'scheduled' | 'in-progress' | 'completed' | 'failed';
  assignedTo?: string | Staff;
  notes?: {
    [k: string]: unknown;
  }[];
  updatedAt: string;
  createdAt: string;
}
export interface Ticket {
  id: string;
  ticketID: string;
  subscriber: string | Subscriber;
  subject: string;
  description: {
    [k: string]: unknown;
  }[];
  status: 'open' | 'in-progress' | 'resolved' | 'closed';
  priority: 'low' | 'medium' | 'high';
  assignedTo?: string | Staff;
  updatedAt: string;
  createdAt: string;
}
export interface Message {
  id: string;
  recipient: string;
  type: 'sms' | 'email' | 'push';
  content: string;
  status: 'sent' | 'failed';
  triggerEvent?: string;
  sentBy?: string | Staff;
  bulkSend?: boolean;
  updatedAt: string;
  createdAt: string;
}
export interface Contact {
  id: string;
  phoneNumber: string;
  fullName?: string;
  source?: string;
  updatedAt: string;
  createdAt: string;
}
export interface MessageTemplate {
  id: string;
  templateName: string;
  content: string;
  updatedAt: string;
  createdAt: string;
}
